import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import g4f
import html
import logging
import time
import threading
import json
import os
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger()
logger.setLevel(logging.INFO)

formatter = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

file_handler = logging.FileHandler('bot.log', encoding='utf-8')
file_handler.setFormatter(formatter)
stream_handler = logging.StreamHandler()
stream_handler.setFormatter(formatter)

logger.addHandler(file_handler)
logger.addHandler(stream_handler)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7767598119:AAG5DWxTCCVPyyPO0MUMXV7EC8c-zbzQQ8I"
SPONSOR_CHANNELS = ['@DedlyxCoder']
ADMIN_ID = 7955714952
GPT_TIMEOUT = 25

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö
CREATORS_INFO = """üë• <b>–°–æ–∑–¥–∞—Ç–µ–ª–∏ –±–æ—Ç–∞:</b>

‚Ä¢ @DedlyAI - —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
‚Ä¢ @DedlySupport - –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ @DedlyxCoder - –∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞"""

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
PROJECT_INFO = """üöÄ <b>DedlyAI Bot</b>

ü§ñ –£–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ GPT-4
üí¨ –û–±—â–∞–π—Ç–µ—Å—å —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º
‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
üéØ –ü—Ä–æ—Å—Ç–æ–π –∏ —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

<b>–¢–∞—Ä–∏—Ñ—ã:</b>
‚Ä¢ üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π - 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å
‚Ä¢ üíé –ü—Ä–µ–º–∏—É–º - –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ (100 —Ä—É–±)"""

# –õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
FREE_REQUEST_LIMIT = 5
PREMIUM_REQUEST_LIMIT = 10000  # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ

bot = telebot.TeleBot(BOT_TOKEN)
user_states = {}
processing_messages = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users_data():
    if os.path.exists('users_data.json'):
        with open('users_data.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–ª—é—á–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
            return {int(k): v for k, v in data.items()}
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users_data():
    with open('users_data.json', 'w', encoding='utf-8') as f:
        json.dump(users_data, f, ensure_ascii=False, indent=4)

users_data = load_users_data()

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–ª–∞—Ç—ã
def load_payment_settings():
    if os.path.exists('payment_settings.json'):
        with open('payment_settings.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    return {"payment_url": "", "price": 100, "currency": "USDT"}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–ª–∞—Ç—ã
def save_payment_settings(settings):
    with open('payment_settings.json', 'w', encoding='utf-8') as f:
        json.dump(settings, f, ensure_ascii=False, indent=4)

payment_settings = load_payment_settings()

# –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç
def load_pending_payments():
    if os.path.exists('pending_payments.json'):
        with open('pending_payments.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    return []

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç
def save_pending_payments(payments):
    with open('pending_payments.json', 'w', encoding='utf-8') as f:
        json.dump(payments, f, ensure_ascii=False, indent=4)

pending_payments = load_pending_payments()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def log_user_event(user, action: str):
    username = user.username or "–±–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞"
    logger.info(f"User {user.id} (@{username}) {action}")

def check_subscription(user_id: int) -> bool:
    try:
        for channel in SPONSOR_CHANNELS:
            member = bot.get_chat_member(channel, user_id)
            if member.status not in ["member", "administrator", "creator"]:
                return False
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏–∫–∏: {str(e)}")
        return False

def update_user_stats(user):
    now = time.time()
    user_id = user.id
    username = user.username or "–±–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞"
    
    if user_id in users_data:
        users_data[user_id].update({
            'last_active': now,
            'request_count': users_data[user_id].get('request_count', 0) + 1,
            'username': username
        })
    else:
        users_data[user_id] = {
            'first_seen': now,
            'last_active': now,
            'request_count': 1,
            'username': username,
            'premium': False,
            'premium_until': None,
            'daily_requests': 0,
            'last_request_date': datetime.now().strftime('%Y-%m-%d')
        }
    
    # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ daily_requests –µ—Å–ª–∏ –¥–µ–Ω—å —Å–º–µ–Ω–∏–ª—Å—è
    current_date = datetime.now().strftime('%Y-%m-%d')
    if users_data[user_id].get('last_request_date') != current_date:
        users_data[user_id]['daily_requests'] = 0
        users_data[user_id]['last_request_date'] = current_date
    
    users_data[user_id]['daily_requests'] = users_data[user_id].get('daily_requests', 0) + 1
    save_users_data()

def can_make_request(user_id):
    if user_id not in users_data:
        return True, ""
    
    user_data = users_data[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Premium —Å—Ç–∞—Ç—É—Å–∞
    if user_data.get('premium', False):
        premium_until = user_data.get('premium_until')
        if premium_until and datetime.now().timestamp() < premium_until:
            return True, ""
        else:
            # –°—Ä–æ–∫ Premium –∏—Å—Ç–µ–∫
            users_data[user_id]['premium'] = False
            save_users_data()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if user_data.get('daily_requests', 0) >= FREE_REQUEST_LIMIT:
        return False, f"‚ö†Ô∏è <b>–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω</b>\n\n–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ {FREE_REQUEST_LIMIT} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è.\n\n–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ Premium-–ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!"
    
    return True, ""

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def subscription_keyboard():
    try:
        chat = bot.get_chat(SPONSOR_CHANNELS[0])
        return InlineKeyboardMarkup().row(
            InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"t.me/{chat.username}"),
            InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check_sub")
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {str(e)}")
        return None

def main_menu_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        KeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"),
        KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥"),
        KeyboardButton("‚≠ê –õ–∏–¥–µ—Ä—ã"),
        KeyboardButton("üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å"),
        KeyboardButton("üì¢ –ö–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞"),
        KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ"),
        KeyboardButton("üíé Premium")
    ]
    keyboard.add(*buttons)
    return keyboard

def premium_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(f"üí∞ –ö—É–ø–∏—Ç—å Premium ({payment_settings['price']} {payment_settings['currency']})", callback_data="buy_premium"),
        InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    return keyboard

def admin_menu():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        InlineKeyboardButton("üë§ –Æ–∑–µ—Ä–Ω–µ–π–º—ã", callback_data="admin_users"),
        InlineKeyboardButton("üíé –ü—Ä–µ–º–∏—É–º", callback_data="admin_premium"),
        InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∞", callback_data="admin_payment"),
        InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="admin_export"),
        InlineKeyboardButton("‚öôÔ∏è –°–æ–∑–¥–∞—Ç–µ–ª–∏", callback_data="admin_creators")
    )
    return keyboard

def payment_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    if payment_settings['payment_url']:
        keyboard.add(
            InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_settings['payment_url']),
            InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="confirm_payment"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_premium")
        )
    else:
        keyboard.add(
            InlineKeyboardButton("‚ùå –°—Å—ã–ª–∫–∞ –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞", callback_data="no_payment"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_premium")
        )
    
    return keyboard

def admin_premium_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ Premium", callback_data="premium_list"),
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å Premium", callback_data="premium_add"),
        InlineKeyboardButton("üìã –û–∂–∏–¥–∞—é—â–∏–µ –æ–ø–ª–∞—Ç—ã", callback_data="pending_payments"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
    )
    return keyboard

def admin_payment_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –æ–ø–ª–∞—Ç—ã", callback_data="change_payment_url"),
        InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="change_payment_price"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
    )
    return keyboard

def pending_payments_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    if not pending_payments:
        keyboard.add(InlineKeyboardButton("üì≠ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç", callback_data="no_action"))
    else:
        for i, payment in enumerate(pending_payments[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            user_id = payment['user_id']
            username = payment.get('username', 'Unknown')
            keyboard.add(InlineKeyboardButton(f"üë§ {username}", callback_data=f"review_payment_{i}"))
    
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_premium"))
    return keyboard

# –§—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
def show_leaders(chat_id):
    if not users_data:
        bot.send_message(chat_id, "üìä <b>–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ª–∏–¥–µ—Ä–∞—Ö</b>", parse_mode='HTML')
        return
        
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤
    sorted_users = sorted(users_data.items(), key=lambda x: x[1].get('request_count', 0), reverse=True)
    
    leaders_text = "üèÜ <b>–¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º:</b>\n\n"
    for i, (user_id, data) in enumerate(sorted_users[:5], 1):
        username = data.get('username', '–±–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞')
        if username == "–±–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞":
            username = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
        
        premium_status = " üíé" if data.get('premium', False) and data.get('premium_until', 0) > time.time() else ""
        leaders_text += f"{i}. {username}{premium_status} - {data.get('request_count', 0)} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
    
    bot.send_message(chat_id, leaders_text, parse_mode='HTML')

def show_premium_info(message):
    bot.send_message(
        message.chat.id,
        "üíé <b>Premium –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
        "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ Premium-–ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º!\n\n"
        "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞\n\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{payment_settings['price']} {payment_settings['currency']}</b>",
        parse_mode='HTML',
        reply_markup=premium_keyboard()
    )

def show_admin_premium(call):
    premium_users = [uid for uid, data in users_data.items() if data.get('premium', False) and data.get('premium_until', 0) > time.time()]
    
    text = (
        f"üíé <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Premium</b>\n\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö Premium-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(premium_users)}\n"
        f"–û–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç: {len(pending_payments)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    bot.edit_message_text(
        text,
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML',
        reply_markup=admin_premium_keyboard()
    )

def export_data(call):
    with open("users_data.json", "rb") as f:
        bot.send_document(call.message.chat.id, f)
    bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")

def show_admin_users(call):
    recent_users = list(users_data.values())[-10:]
    user_list = "\n".join([f"‚îú @{u['username']} ({u['request_count']} –∑–∞–ø—Ä–æ—Å–æ–≤)" for u in recent_users])
    
    response = f"üë§ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n{user_list}"
    
    bot.edit_message_text(
        response,
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML',
        reply_markup=admin_menu()
    )

def show_admin_payment(call):
    text = (
        f"üí∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–ª–∞—Ç—ã</b>\n\n"
        f"–°—Å—ã–ª–∫–∞: {payment_settings['payment_url'] or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n"
        f"–¶–µ–Ω–∞: {payment_settings['price']} {payment_settings['currency']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    bot.edit_message_text(
        text,
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML',
        reply_markup=admin_payment_keyboard()
    )

def show_admin_settings(call):
    bot.edit_message_text(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
        "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞",
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML',
        reply_markup=admin_menu()
    )

def get_admin_data(action):
    if action == "stats":
        active_users = len([u for u in users_data.values() if time.time() - u['last_active'] < 86400])
        total_requests = sum(u['request_count'] for u in users_data.values())
        premium_users = len([u for u in users_data.values() if u.get('premium', False) and u.get('premium_until', 0) > time.time()])
        
        return f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len(users_data)}</b>
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö (–∑–∞ 24—á): <b>{active_users}</b>
‚îú Premium-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{premium_users}</b>
‚îî –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: <b>{total_requests}</b>"""
    
    elif action == "users":
        recent_users = list(users_data.values())[-10:]
        user_list = "\n".join([f"‚îú @{u['username']} ({u['request_count']} –∑–∞–ø—Ä–æ—Å–æ–≤)" for u in recent_users])
        
        return f"üë§ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n{user_list}"

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def send_main_menu(chat_id):
    bot.send_message(
        chat_id, 
        "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.",
        parse_mode='HTML', 
        reply_markup=main_menu_keyboard()
    )

def handle_unsubscribed(chat_id, user_id):
    try:
        msg = bot.send_message(
            chat_id, 
            "üì¢ <b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å'",
            parse_mode='HTML',
            reply_markup=subscription_keyboard()
        )
        user_states[user_id] = {'state': 'awaiting_sub', 'message_id': msg.message_id}
    except Exception as e:
        logger.error(f"Unsubscribed error: {str(e)}")

def process_gpt(user, message):
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
        bot.send_chat_action(message.chat.id, 'typing')
        
        response = g4f.ChatCompletion.create(
            model=g4f.models.gpt_4,
            messages=[{"role": "user", "content": message.text}],
            timeout=GPT_TIMEOUT
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        bot.send_message(message.chat.id, html.unescape(response), parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"GPT error: {str(e)}")
        bot.send_message(
            message.chat.id, 
            "‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.",
            parse_mode='HTML'
        )
    finally:
        processing_messages.pop(message.chat.id, None)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@bot.message_handler(commands=['start'])
def handle_start(message):
    try:
        user = message.from_user
        log_user_event(user, "—Å—Ç–∞—Ä—Ç")
        update_user_stats(user)
        
        if user.id in user_states:
            try: 
                bot.delete_message(message.chat.id, user_states[user.id]['message_id'])
            except: 
                pass
            
        if check_subscription(user.id):
            send_main_menu(message.chat.id)
        else:
            msg = bot.send_message(
                message.chat.id, 
                "üì¢ <b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å'",
                parse_mode='HTML',
                reply_markup=subscription_keyboard()
            )
            user_states[user.id] = {'state': 'awaiting_sub', 'message_id': msg.message_id}
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞: {str(e)}")

@bot.message_handler(commands=['admin'])
def handle_admin_command(message):
    if message.from_user.id != ADMIN_ID:
        return
        
    bot.send_message(
        message.chat.id,
        "üë®‚Äçüíª <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>",
        parse_mode='HTML',
        reply_markup=admin_menu()
    )

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    try:
        logger.info(f"Received callback: {call.data}")
        
        if call.data == "check_sub":
            handle_subscription(call)
        elif call.data == "buy_premium":
            show_payment_info(call)
        elif call.data == "my_stats":
            show_user_stats(call)
        elif call.data == "back_to_main":
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send_main_menu(call.message.chat.id)
        elif call.data == "back_to_premium":
            bot.edit_message_text(
                "üíé <b>Premium –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
                "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ Premium-–ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º!\n\n"
                "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n"
                "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞\n\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{payment_settings['price']} {payment_settings['currency']}</b>",
                call.message.chat.id,
                call.message.message_id,
                parse_mode='HTML',
                reply_markup=premium_keyboard()
            )
        elif call.data == "confirm_payment":
            confirm_payment(call)
        elif call.data == "no_payment":
            bot.answer_callback_query(call.id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª –æ–ø–ª–∞—Ç—É", show_alert=True)
        elif call.data.startswith("admin_"):
            handle_admin_action(call)
        elif call.data.startswith("premium_"):
            handle_premium_admin_action(call)
        elif call.data.startswith("review_payment_"):
            review_payment(call)
        elif call.data == "pending_payments":
            show_pending_payments(call)
        elif call.data == "change_payment_url":
            handle_change_payment_url(call)
        elif call.data == "change_payment_price":
            handle_change_payment_price(call)
        elif call.data == "admin_back":
            bot.edit_message_text(
                "üë®‚Äçüíª <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>",
                call.message.chat.id,
                call.message.message_id,
                parse_mode='HTML',
                reply_markup=admin_menu()
            )
        elif call.data == "admin_premium":
            show_admin_premium(call)
        elif call.data == "admin_payment":
            show_admin_payment(call)
        elif call.data.startswith("approve_") or call.data.startswith("reject_"):
            handle_payment_review_action(call)
            
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Callback error: {str(e)}")
        try:
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        except:
            pass

def handle_change_payment_url(call):
    if call.from_user.id != ADMIN_ID:
        return
        
    user_states[call.from_user.id] = {'state': 'change_payment_url'}
    bot.send_message(
        call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
        reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_payment"))
    )

def handle_change_payment_price(call):
    if call.from_user.id != ADMIN_ID:
        return
        
    user_states[call.from_user.id] = {'state': 'change_payment_price'}
    bot.send_message(
        call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∏ –≤–∞–ª—é—Ç—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n\n–ü—Ä–∏–º–µ—Ä: <code>100 USDT</code>",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_payment"))
    )

def handle_subscription(call):
    user = call.from_user
    try:
        time.sleep(1)
        if check_subscription(user.id):
            try: 
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except: 
                bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            send_main_menu(call.message.chat.id)
            bot.answer_callback_query(call.id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.", show_alert=True)
        else:
            bot.answer_callback_query(call.id, "‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–¥–ø–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=subscription_keyboard())
    except Exception as e:
        logger.error(f"Subscription error: {str(e)}")

def show_payment_info(call):
    if not payment_settings['payment_url']:
        bot.answer_callback_query(call.id, "–û–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
        
    bot.edit_message_text(
        f"üí≥ <b>–û–ø–ª–∞—Ç–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Premium-–¥–æ—Å—Ç—É–ø–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ <b>{payment_settings['price']} {payment_settings['currency']}</b>\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ\n"
        "2. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª'\n"
        "3. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–∞—à —Å—Ç–∞—Ç—É—Å\n\n"
        "–û–±—ã—á–Ω–æ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤.",
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML',
        reply_markup=payment_keyboard()
    )

def confirm_payment(call):
    user_id = call.from_user.id
    username = call.from_user.username or "–±–µ–∑ username"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –æ–∂–∏–¥–∞—é—â–µ–π –æ–ø–ª–∞—Ç—ã –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for payment in pending_payments:
        if payment['user_id'] == user_id:
            bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –æ–ø–ª–∞—Ç—ã", show_alert=True)
            return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç
    pending_payments.append({
        'user_id': user_id,
        'username': username,
        'date': datetime.now().strftime('%Y-%m-%d %H:%M'),
        'status': 'pending'
    })
    save_pending_payments(pending_payments)
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    try:
        bot.send_message(
            ADMIN_ID,
            f"üíé –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –æ–ø–ª–∞—Ç—ã\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
            f"ID: {user_id}\n"
            f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üìã –ö –æ–∂–∏–¥–∞—é—â–∏–º –æ–ø–ª–∞—Ç–∞–º", callback_data="pending_payments")
            )
        )
    except Exception as e:
        logger.error(f"Error sending admin notification: {str(e)}")
    
    bot.edit_message_text(
        "‚úÖ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</b>\n\n"
        "–û–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤–∞—à Premium-—Å—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML'
    )

def show_user_stats(call):
    user_id = call.from_user.id
    if user_id in users_data:
        user_data = users_data[user_id]
        premium_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if user_data.get('premium', False) and user_data.get('premium_until', 0) > time.time() else "‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–∞"
        
        if user_data.get('premium_until'):
            premium_until = datetime.fromtimestamp(user_data['premium_until']).strftime('%d.%m.%Y %H:%M')
        else:
            premium_until = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        
        stats_text = (
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üë§ –ò–º—è: @{call.from_user.username or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}\n"
            f"üÜî ID: {call.from_user.id}\n"
            f"üíé Premium: {premium_status}\n"
            f"üìÖ –î–æ: {premium_until}\n"
            f"üìû –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {user_data.get('request_count', 0)}\n"
            f"üìÖ –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {user_data.get('daily_requests', 0)}/{FREE_REQUEST_LIMIT if not user_data.get('premium', False) else '‚àû'}"
        )
    else:
        stats_text = "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    
    bot.edit_message_text(
        stats_text,
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML',
        reply_markup=premium_keyboard()
    )

def handle_admin_action(call):
    if call.from_user.id != ADMIN_ID:
        return
    
    action = call.data.split('_')[1]
    
    if action == "creators":
        response = CREATORS_INFO
        bot.edit_message_text(
            response,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=admin_menu()
        )
    elif action == "export":
        export_data(call)
    elif action == "premium":
        show_admin_premium(call)
    elif action == "payment":
        show_admin_payment(call)
    elif action == "back":
        bot.edit_message_text(
            "üë®‚Äçüíª <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=admin_menu()
        )
    else:
        response = get_admin_data(action)
        bot.edit_message_text(
            response,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=admin_menu()
        )

def show_premium_admin_panel(call):
    premium_users = [uid for uid, data in users_data.items() if data.get('premium', False) and data.get('premium_until', 0) > time.time()]
    
    text = (
        f"üíé <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Premium</b>\n\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö Premium-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(premium_users)}\n"
        f"–û–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç: {len(pending_payments)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    bot.edit_message_text(
        text,
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML',
        reply_markup=admin_premium_keyboard()
    )

def show_payment_admin_panel(call):
    text = (
        f"üí∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–ª–∞—Ç—ã</b>\n\n"
        f"–°—Å—ã–ª–∫–∞: {payment_settings['payment_url'] or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n"
        f"–¶–µ–Ω–∞: {payment_settings['price']} {payment_settings['currency']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    bot.edit_message_text(
        text,
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML',
        reply_markup=admin_payment_keyboard()
    )

def show_pending_payments(call):
    text = f"üìã <b>–û–∂–∏–¥–∞—é—â–∏–µ –æ–ø–ª–∞—Ç—ã</b>\n\n–í—Å–µ–≥–æ: {len(pending_payments)}\n\n"
    
    if not pending_payments:
        text += "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç"
    else:
        for i, payment in enumerate(pending_payments[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            text += f"{i+1}. @{payment['username']} (ID: {payment['user_id']})\n   –î–∞—Ç–∞: {payment['date']}\n\n"
    
    bot.edit_message_text(
        text,
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML',
        reply_markup=pending_payments_keyboard()
    )

def review_payment(call):
    payment_index = int(call.data.split('_')[-1])
    
    if payment_index >= len(pending_payments):
        bot.answer_callback_query(call.id, "–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    payment = pending_payments[payment_index]
    user_id = payment['user_id']
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å (30 –¥–Ω–µ–π)", callback_data=f"approve_30_{payment_index}"),
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å (90 –¥–Ω–µ–π)", callback_data=f"approve_90_{payment_index}"),
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å (–±–µ—Å—Å—Ä–æ—á–Ω–æ)", callback_data=f"approve_forever_{payment_index}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{payment_index}"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="pending_payments")
    )
    
    bot.edit_message_text(
        f"üë§ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –æ–ø–ª–∞—Ç—ã</b>\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{payment['username']}\n"
        f"ID: {user_id}\n"
        f"–î–∞—Ç–∞: {payment['date']}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML',
        reply_markup=keyboard
    )

def handle_premium_admin_action(call):
    if call.from_user.id != ADMIN_ID:
        return
    
    if call.data == "premium_list":
        premium_users = []
        for uid, data in users_data.items():
            if data.get('premium', False) and data.get('premium_until', 0) > time.time():
                premium_until = datetime.fromtimestamp(data['premium_until']).strftime('%d.%m.%Y')
                premium_users.append(f"@{data['username']} –¥–æ {premium_until}")
        
        text = "üíé <b>–ê–∫—Ç–∏–≤–Ω—ã–µ Premium-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n" + "\n".join(premium_users) if premium_users else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö Premium-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_premium"))
        )
    
    elif call.data == "premium_add":
        user_states[call.from_user.id] = {'state': 'admin_add_premium'}
        bot.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –¥–Ω—è—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n\n–ü—Ä–∏–º–µ—Ä: <code>123456789 30</code>\n–î–ª—è –±–µ—Å—Å—Ä–æ—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤–≤–µ–¥–∏—Ç–µ 0",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_premium"))
        )
    
    elif call.data.startswith("approve_") or call.data.startswith("reject_"):
        handle_payment_review_action(call)
    
    elif call.data == "admin_back":
        bot.edit_message_text(
            "üë®‚Äçüíª <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=admin_menu()
        )

def handle_payment_review_action(call):
    try:
        action_parts = call.data.split('_')
        action = action_parts[0]
        payment_index = int(action_parts[-1])
        
        logger.info(f"Processing payment review: {action}, index: {payment_index}")
        
        if payment_index >= len(pending_payments):
            bot.answer_callback_query(call.id, "–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        payment = pending_payments[payment_index]
        user_id = payment['user_id']
        
        if action == "approve":
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
            if action_parts[1] == "30":
                days = 30
            elif action_parts[1] == "90":
                days = 90
            else:  # forever
                days = 36500  # ~100 –ª–µ—Ç (–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –±–µ—Å—Å—Ä–æ—á–Ω–æ)
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º Premium
            if user_id not in users_data:
                users_data[user_id] = {
                    'username': payment['username'],
                    'request_count': 0,
                    'premium': True,
                    'premium_until': (datetime.now() + timedelta(days=days)).timestamp(),
                    'first_seen': time.time(),
                    'last_active': time.time()
                }
            else:
                users_data[user_id]['premium'] = True
                users_data[user_id]['premium_until'] = (datetime.now() + timedelta(days=days)).timestamp()
            
            save_users_data()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                if days == 36500:
                    duration_text = "–±–µ—Å—Å—Ä–æ—á–Ω—ã–π"
                else:
                    duration_text = f"{days} –¥–Ω–µ–π"
                
                bot.send_message(
                    user_id,
                    f"üéâ <b>–í–∞–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ Premium-–ø–æ–¥–ø–∏—Å–∫–∞!</b>\n\n"
                    f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {duration_text}\n"
                    f"–î–æ: {(datetime.now() + timedelta(days=days)).strftime('%d.%m.%Y')}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤!",
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"Error sending notification to user: {e}")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
            pending_payments.pop(payment_index)
            save_pending_payments(pending_payments)
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            bot.answer_callback_query(call.id, f"‚úÖ Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {days} –¥–Ω–µ–π")
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.edit_message_text(
                f"‚úÖ Premium-–ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{payment['username']} –Ω–∞ {days} –¥–Ω–µ–π",
                call.message.chat.id,
                call.message.message_id,
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ö –æ–∂–∏–¥–∞—é—â–∏–º", callback_data="pending_payments"))
            )
        
        elif action == "reject":
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                bot.send_message(
                    user_id,
                    "‚ùå <b>–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ Premium-–ø–æ–¥–ø–∏—Å–∫—É –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, –æ–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞. –ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –æ–ø–ª–∞—Ç–∏–ª–∏, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"Error sending rejection notification: {e}")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
            pending_payments.pop(payment_index)
            save_pending_payments(pending_payments)
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            bot.answer_callback_query(call.id, "‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.edit_message_text(
                f"‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ Premium –æ—Ç @{payment['username']} –æ—Ç–∫–ª–æ–Ω–µ–Ω",
                call.message.chat.id,
                call.message.message_id,
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ö –æ–∂–∏–¥–∞—é—â–∏–º", callback_data="pending_payments"))
            )
    
    except Exception as e:
        logger.error(f"Error in handle_payment_review_action: {str(e)}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")

@bot.message_handler(func=lambda m: True)
def handle_message(message):
    try:
        user = message.from_user
        user_id = user.id
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if user_id == ADMIN_ID and user_id in user_states:
            state = user_states[user_id]['state']
            
            if state == 'admin_add_premium':
                # –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç Premium
                try:
                    parts = message.text.split()
                    target_user_id = int(parts[0])
                    days = int(parts[1])
                    
                    if target_user_id not in users_data:
                        users_data[target_user_id] = {
                            'username': '–∞–¥–º–∏–Ω-–¥–æ–±–∞–≤–ª–µ–Ω',
                            'request_count': 0,
                            'premium': True,
                            'premium_until': (datetime.now() + timedelta(days=days)).timestamp() if days > 0 else (datetime.now() + timedelta(days=36500)).timestamp(),
                            'first_seen': time.time(),
                            'last_active': time.time()
                        }
                    else:
                        users_data[target_user_id]['premium'] = True
                        if days > 0:
                            users_data[target_user_id]['premium_until'] = (datetime.now() + timedelta(days=days)).timestamp()
                        else:
                            users_data[target_user_id]['premium_until'] = (datetime.now() + timedelta(days=36500)).timestamp()
                    
                    save_users_data()
                    
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                    try:
                        duration_text = "–±–µ—Å—Å—Ä–æ—á–Ω—ã–π" if days == 0 else f"{days} –¥–Ω–µ–π"
                        bot.send_message(
                            target_user_id,
                            f"üéâ <b>–í–∞–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ Premium-–ø–æ–¥–ø–∏—Å–∫–∞!</b>\n\n"
                            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {duration_text}\n"
                            f"–î–æ: {(datetime.now() + timedelta(days=days if days > 0 else 36500)).strftime('%d.%m.%Y')}\n\n"
                            f"–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤!",
                            parse_mode='HTML'
                        )
                    except:
                        pass
                    
                    bot.send_message(
                        message.chat.id,
                        f"‚úÖ Premium-–ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –Ω–∞ {'–±–µ—Å—Å—Ä–æ—á–Ω–æ' if days == 0 else f'{days} –¥–Ω–µ–π'}"
                    )
                    
                except Exception as e:
                    bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
                
                del user_states[user_id]
                return
                
            elif state == 'change_payment_url':
                payment_settings['payment_url'] = message.text
                save_payment_settings(payment_settings)
                bot.send_message(message.chat.id, f"‚úÖ –°—Å—ã–ª–∫–∞ –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {message.text}")
                del user_states[user_id]
                return
                
            elif state == 'change_payment_price':
                try:
                    parts = message.text.split()
                    price = int(parts[0])
                    currency = parts[1] if len(parts) > 1 else "USDT"
                    
                    payment_settings['price'] = price
                    payment_settings['currency'] = currency
                    save_payment_settings(payment_settings)
                    bot.send_message(message.chat.id, f"‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {price} {currency}")
                except Exception as e:
                    bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
                
                del user_states[user_id]
                return
        
        # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        update_user_stats(user)
        
        if message.text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥":
            bot.send_message(message.chat.id, "‚ôªÔ∏è <b>–î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω!</b>", parse_mode='HTML')
            return
            
        elif message.text == "‚≠ê –õ–∏–¥–µ—Ä—ã":
            show_leaders(message.chat.id)
            return
            
        elif message.text == "üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å":
            bot.send_message(
                message.chat.id,
                "üë®‚Äçüíª <b>–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞:</b>\n@DedlyAI\n\n"
                "üìß <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>\n@DedlySupport\n\n"
                "üì¢ <b>–ö–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞:</b>\n@DedlyxCoder",
                parse_mode='HTML'
            )
            return
            
        elif message.text == "üì¢ –ö–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞":
            bot.send_message(
                message.chat.id,
                "üì¢ <b>–ù–∞—à –∫–∞–Ω–∞–ª:</b>\n@DedlyxCoder\n\n"
                "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!",
                parse_mode='HTML'
            )
            return
            
        elif message.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
            bot.send_message(
                message.chat.id,
                PROJECT_INFO,
                parse_mode='HTML'
            )
            return
            
        elif message.text == "üíé Premium":
            show_premium_info(message)
            return
            
        elif message.text == "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
            bot.send_message(
                message.chat.id,
                "üí¨ <b>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å</b>\n\n"
                "–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–π –∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç!",
                parse_mode='HTML'
            )
            return
            
        if not check_subscription(user.id):
            handle_unsubscribed(message.chat.id, user.id)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        can_request, error_msg = can_make_request(user.id)
        if not can_request:
            bot.send_message(message.chat.id, error_msg, parse_mode='HTML')
            return
            
        processing_messages[message.chat.id] = True
        threading.Thread(target=process_gpt, args=(user, message)).start()
        
    except Exception as e:
        logger.error(f"Message error: {str(e)}")

if __name__ == "__main__":
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ–±—Ö—É–∫–æ–≤
    bot.remove_webhook()
    # –î–æ–±–∞–≤–∏–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
    time.sleep(1)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()